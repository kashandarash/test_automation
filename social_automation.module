<?php

/**
 * @file
 * Hook implementations for the Automation module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\file\FileInterface;
use Drupal\search_api\Query\ResultSetInterface;
use Drupal\social_automation\Event\EntityEvent;
use Drupal\social_automation\Event\SearchEvent;
use Drupal\social_automation\Event\UserLoginEvent;
use Drupal\social_automation\Event\UserLogoutEvent;
use Drupal\social_automation\Event\SystemCronEvent;
use Psr\Log\LogLevel;

/**
 * Implements hook_theme().
 */
function social_automation_theme() {
  return [
    'social_automation_debug_log_element' => [
      'render element' => 'element',
      'file' => 'social_automation.theme.inc',
    ],
  ];
}

/**
 * Implements hook_page_top().
 */
function social_automation_page_top(array &$page_top) {
  $debug_log = \Drupal::service('logger.social_automation_debug_log');
  $markup = $debug_log->render();
  // If debugging is turned off $markup will be empty.
  if (!empty($markup)) {
    if (\Drupal::currentUser()->hasPermission('access automation debug')) {
      // Send debug output to the screen.
      \Drupal::service('messenger')->addError($markup);
    }
    // Log debugging information to logger.channel.automation only if
    // the automation system logging setting 'debug_log.system_debug'
    // is enabled. These logs get sent to the system dblog, end up in
    // the Drupal database, and are viewable at /admin/reports/dblog.
    if (\Drupal::config('social_automation.settings')->get('debug_log.system_debug')) {
      \Drupal::service('logger.channel.automation')->log(LogLevel::DEBUG, $markup, []);
    }
  }
  // Remove logs already rendered.
  $debug_log->clearLogs();
}

/**
 * Implements hook_page_attachments().
 */
function social_automation_page_attachments(array &$attachments) {
  // We need JavaScript and CSS to render the debug log properly
  // and to provide the expand/collapse functionality.
  if (\Drupal::currentUser()->hasPermission('access automation debug')) {
    if (\Drupal::config('social_automation.settings')->get('debug_log.enabled')) {
      $attachments['#attached']['library'][] = 'social_automation/social_automation.debug';
    }
  }
}

/**
 * Implements hook_help().
 */
function social_automation_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.automation':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>';
      $output .= t('The Automation module allows site administrators to define conditionally executed actions based on occurring events (ECA-automation). For more information, see the <a href=":url1" target="_blank">online documentation for the Automation module</a> and the current <a href=":url2" target="_blank">Automation documentation for Drupal 8 on Gitbooks</a>.', [
        ':url1' => 'https://www.drupal.org/project/automation',
        ':url2' => 'https://thefubhy.gitbooks.io/social_automation/content/',
      ]);
      $output .= '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Reaction automation') . '</dt>';
      $output .= '<dd>' . t('Reaction automation associate one or more reactions to one or more specific site events. Execution of a workflow event actions can optionally be tied to one or more conditions. To list and update existing reaction automation and to create a new one, visit the <a href=":url">reaction automation overview page</a>.', [':url' => Url::fromRoute('entity.social_automation_workflow_event.collection')->toString()]) . '</dd>';
      $output .= '<dt>' . t('Components') . '</dt>';
      $output .= '<dd>' . t('Workflow event components allows to define reusable combined actions which can optionally be tied to one or more conditions. Components are usable as actions in reaction automation or in other components. To list and update existing workflowevent components and to create a new one, visit the <a href=":url">components overview pages</a>.', [':url' => Url::fromRoute('entity.automation_component.collection')->toString()]) . '</dd>';
      $output .= '<dt>' . t('General settings') . '</dt>';
      $output .= '<dd>' . t('The Automation modules allows to set global settings settings, such as logging. Visit the <a href=":url">automation settings page</a> to view and update current settings.', [':url' => Url::fromRoute('social_automation.settings')->toString()]) . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_user_login().
 */
function social_automation_user_login($account) {
  // Set the account twice on the event: as the main subject but also in the
  // list of arguments.
  $event = new UserLoginEvent($account);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(UserLoginEvent::EVENT_NAME, $event);
}

/**
 * Implements hook_user_logout().
 */
function social_automation_user_logout($account) {
  // Set the account twice on the event: as the main subject but also in the
  // list of arguments.
  $account = \Drupal::entityTypeManager()->getStorage('user')->load($account->id());
  $event = new UserLogoutEvent($account, ['account' => $account]);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(UserLogoutEvent::EVENT_NAME, $event);
}

/**
 * Implements hook_entity_view().
 */
function social_automation_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $entity_type_id = $entity->getEntityTypeId();
    $event = new EntityEvent($entity, [$entity_type_id => $entity]);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch("social_automation_entity_view:$entity_type_id", $event);
  }
}

/**
 * Implements hook_entity_presave().
 */
function social_automation_entity_presave(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $entity_type_id = $entity->getEntityTypeId();
    $event = new EntityEvent($entity, [
      $entity_type_id => $entity,
      $entity_type_id . '_unchanged' => $entity->original,
    ]);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch("social_automation_entity_presave:$entity_type_id", $event);
  }
}

/**
 * Implements hook_entity_delete().
 */
function social_automation_entity_delete(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $entity_type_id = $entity->getEntityTypeId();
    $event = new EntityEvent($entity, [$entity_type_id => $entity]);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch("social_automation_entity_delete:$entity_type_id", $event);
  }
}

/**
 * Implements hook_entity_insert().
 */
function social_automation_entity_insert(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $entity_type_id = $entity->getEntityTypeId();
    $event = new EntityEvent($entity, [$entity_type_id => $entity]);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch("social_automation_entity_insert:$entity_type_id", $event);
  }
}

/**
 * Implements hook_file_download().
 */
function social_automation_file_download($uri) {
  $files = \Drupal::entityTypeManager()
    ->getStorage('file')
    ->loadByProperties(['uri' => $uri]);
  $file = reset($files);

  if ($file instanceof FileInterface && strpos($file->getMimeType(), 'image') === FALSE) {
    $entity_type_id = $file->getEntityType()->id();
    $event = new EntityEvent($file, [$entity_type_id => $file]);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch("social_automation_file_download:$entity_type_id", $event);
  }
}

/**
 * Implements hook_entity_update().
 */
function social_automation_entity_update(EntityInterface $entity) {
  // Only handle content entities and ignore config entities.
  if ($entity instanceof ContentEntityInterface) {
    $entity_type_id = $entity->getEntityTypeId();
    $event = new EntityEvent($entity, [
      $entity_type_id => $entity,
      $entity_type_id . '_unchanged' => $entity->original,
    ]);
    $event_dispatcher = \Drupal::service('event_dispatcher');
    $event_dispatcher->dispatch("social_automation_entity_update:$entity_type_id", $event);
  }
}

/**
 * Implements hook_search_api_results_alter().
 */
function social_automation_search_api_results_alter(ResultSetInterface $results) {
  // We don't care about search result, we only need the current user.
  $user_id = \Drupal::currentUser()->id();
  $user_entity = \Drupal::entityTypeManager()->getStorage('user')->load($user_id);
  $event = new SearchEvent($user_entity, ['user' => $user_entity]);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(SearchEvent::EVENT_NAME, $event);
}

/**
 * Implements hook_cron().
 */
function social_automation_cron() {
  $event = new SystemCronEvent();
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(SystemCronEvent::EVENT_NAME, $event);
}

/**
 * Implements hook_mail().
 */
function social_automation_mail($key, &$message, $params) {
  $message['subject'] .= str_replace(["\r", "\n"], '', $params['subject']);
  $message['body'][] = $params['message'];
}
