<?php

namespace Drupal\social_automation\Routing;

use Drupal\Core\Routing\RouteSubscriberBase;
use Drupal\Core\Routing\RoutingEvents;
use Drupal\social_automation\Ui\AutomationUiDefinition;
use Drupal\social_automation\Ui\AutomationUiManagerInterface;
use Symfony\Component\Routing\Route;
use Symfony\Component\Routing\RouteCollection;

/**
 * Adds routes generated by the automation UI handlers.
 */
class AutomationUiRouteSubscriber extends RouteSubscriberBase {

  /**
   * The automation UI manager.
   *
   * @var \Drupal\social_automation\Ui\AutomationUiManagerInterface
   */
  protected $automationUiManager;

  /**
   * Constructs the object.
   *
   * @param \Drupal\social_automation\Ui\AutomationUiManagerInterface $social_automation_ui_manager
   *   The automation UI manager.
   */
  public function __construct(AutomationUiManagerInterface $social_automation_ui_manager) {
    $this->automationUiManager = $social_automation_ui_manager;
  }

  /**
   * {@inheritdoc}
   */
  protected function alterRoutes(RouteCollection $collection) {
    foreach ($this->automationUiManager->getDefinitions() as $name => $definition) {
      $ui_definition = $this->automationUiManager->getDefinition($name);
      $this->registerRoutes($ui_definition, $collection);
    }
  }

  /**
   * {@inheritdoc}
   */
  public static function getSubscribedEvents() {
    $events = parent::getSubscribedEvents();
    // Should run after AdminRouteSubscriber so the routes can inherit admin
    // status of the edit routes on entities. Therefore priority -210.
    $events[RoutingEvents::ALTER] = ['onAlterRoutes', -210];
    return $events;
  }

  /**
   * Registers the routes as needed for the UI.
   *
   * @param \Drupal\social_automation\Ui\AutomationUiDefinition $ui_definition
   *   The definition of the AutomationUI for which to register the routes.
   * @param \Symfony\Component\Routing\RouteCollection $collection
   *   The route collection to which to add the routes.
   */
  protected function registerRoutes(AutomationUiDefinition $ui_definition, RouteCollection $collection) {
    $base_route = $collection->get($ui_definition->base_route);

    if (NULL === $base_route) {
      return;
    }

    $options = [
      'parameters' => ($base_route->getOption('parameters') ?: []),
      '_admin_route' => $base_route->getOption('_admin_route') ?: FALSE,
      '_social_automation_ui' => $ui_definition->id,
    ];
    $requirements = [
      '_permission' => $ui_definition->permissions ?: $base_route->getRequirement('_permission'),
    ];

    $route = (new Route($base_route->getPath() . '/add/{expression_id}'))
      ->addDefaults([
        '_form' => '\Drupal\social_automation\Form\AddExpressionForm',
        '_title_callback' => '\Drupal\social_automation\Form\AddExpressionForm::getTitle',
      ])
      ->addOptions($options)
      ->addRequirements($requirements);
    $collection->add($ui_definition->base_route . '.expression.add', $route);

    // Route for editing expressions in a Workflow event.
    $route = (new Route($base_route->getPath() . '/edit/{uuid}'))
      ->addDefaults([
        '_form' => '\Drupal\social_automation\Form\EditExpressionForm',
        '_title_callback' => '\Drupal\social_automation\Form\EditExpressionForm::getTitle',
      ])
      ->addOptions($options)
      ->addRequirements($requirements);
    $collection->add($ui_definition->base_route . '.expression.edit', $route);

    // Route for deleting expressions from a Workflow event.
    $route = (new Route($base_route->getPath() . '/delete/{uuid}'))
      ->addDefaults([
        '_form' => '\Drupal\social_automation\Form\DeleteExpressionForm',
        '_title' => 'Delete expression',
      ])
      ->addOptions($options)
      ->addRequirements($requirements);
    $collection->add($ui_definition->base_route . '.expression.delete', $route);

    // Route to break the lock of an edited workflowevent.
    $route = (new Route($base_route->getPath() . '/break-lock'))
      ->addDefaults([
        '_form' => '\Drupal\social_automation\Form\BreakLockForm',
        '_title' => 'Break lock',
      ])
      ->addOptions($options)
      ->addRequirements($requirements);
    $collection->add($ui_definition->base_route . '.break_lock', $route);

    // Route for data selector autocomplete.
    $route = (new Route($base_route->getPath() . '/autocomplete/{uuid}'))
      ->addDefaults([
        '_controller' => '\Drupal\social_automation\Controller\AutocompleteController::autocomplete',
        'uuid' => '',
      ])
      ->addOptions($options)
      ->addRequirements($requirements);
    $collection->add($ui_definition->base_route . '.autocomplete', $route);
  }

}
